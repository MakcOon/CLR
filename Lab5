//Program.cs
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CurrencyConverter
{
    class Program
    {
        static async Task Main(string[] args)
        {
            const string apiKey = "MgJmg9p6npPtYZj2VqEnvFjTeOMYUOdM";
            var client = new ApiClient(apiKey);

            // Get exchange rates for USD and EUR
            var parameters = new Dictionary<string, string>()
            {
                { "base", "UAH" },
                { "symbols", "USD,EUR" }
            };

            var response = await client.PostAsync<Dictionary<string, decimal>>("exchange_rates", parameters);

            if (response.StatusCode == 200)
            {
                Console.WriteLine($"Exchange rates for UAH: USD {response.Data["USD"]}, EUR {response.Data["EUR"]}");
            }
            else
            {
                Console.WriteLine($"Error {response.StatusCode}: {response.Message}");
            }

            Console.ReadKey();
        }
    }
}
//HttpClients.cs
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace CurrencyConverter
{
    public class ApiClient
    {
        private readonly HttpClient _client;

        public ApiClient(string apiKey)
        {
            _client = new HttpClient();
            _client.BaseAddress = new Uri("https://api.currencyscoop.com/v1/");
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);
        }

        public async Task<ApiResponse<T>> GetAsync<T>(string endpoint)
        {
            try
            {
                var response = await _client.GetAsync(endpoint);
                response.EnsureSuccessStatusCode();
                var data = await response.Content.ReadAsAsync<T>();
                return new ApiResponse<T>(data);
            }
            catch (HttpRequestException ex)
            {
                return new ApiResponse<T>(ex.Message, (int)ex.StatusCode);
            }
            catch (Exception ex)
            {
                return new ApiResponse<T>(ex.Message, 500);
            }
        }

        public async Task<ApiResponse<T>> PostAsync<T>(string endpoint, Dictionary<string, string> parameters)
        {
            try
            {
                var content = new FormUrlEncodedContent(parameters);
                var response = await _client.PostAsync(endpoint, content);
                response.EnsureSuccessStatusCode();
                var data = await response.Content.ReadAsAsync<T>();
                return new ApiResponse<T>(data);
            }
            catch (HttpRequestException ex)
            {
                return new ApiResponse<T>(ex.Message, (int)ex.StatusCode);
            }
            catch (Exception ex)
            {
                return new ApiResponse<T>(ex.Message, 500);
            }
        }
    }
}
//ApiResponse.cs
using System.Collections.Generic;
using System.Net;

namespace CurrencyConverter
{
    public class ApiResponse<T>
    {
        public string Message { get; set; }
        public int StatusCode { get; set; }
        public List<T> Data { get; set; }

        public ApiResponse(List<T> data)
        {
            StatusCode = (int)HttpStatusCode.OK;
            Data = data;
        }

        public ApiResponse(string message, int statusCode)
        {
            Message = message;
            StatusCode = statusCode;
        }
    }
}
